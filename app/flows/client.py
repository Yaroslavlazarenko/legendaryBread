from app.bot.keyboards import ReplyButton
from datetime import datetime
from enum import Enum, auto
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from app.bot.middleware import restricted
from app.models.user import UserRole
from app.models.order import SalesOrderRow, SalesOrderItemRow
from app.models.product import Product
from app.sheets import references, logs
from app.bot.notifications import notify_admins
from app.utils.logger import log
from .common import cancel

class OrderState(Enum):
    SELECT_PRODUCT = auto()
    ENTER_QUANTITY = auto()
    CHECKOUT_OR_ADD = auto()

@restricted(allowed_roles=[UserRole.CLIENT, UserRole.ADMIN])
async def catalog_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤."""
    products = references.get_available_products()
    if not products:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç.")
        return

    message = "<b>–ù–∞—à –ö–∞—Ç–∞–ª–æ–≥:</b>\n\n"
    for p in products:
        message += f"üîπ <b>{p.name}</b>\n"
        message += f"   <i>{p.description}</i>\n"
        message += f"   –¶–µ–Ω–∞: {p.get_display_price()}\n\n"
    
    await update.message.reply_text(message, parse_mode='HTML')
    await update.message.reply_text("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /order")

@restricted(allowed_roles=[UserRole.CLIENT, UserRole.ADMIN])
async def order_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> OrderState | int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞."""
    context.user_data['cart'] = context.user_data.get('cart', {})
    
    products = references.get_available_products()
    if not products:
        if update.callback_query:
             await update.callback_query.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞.")
        else:
            await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞.")
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton(f"{p.name} ({p.get_display_price()})", callback_data=f"prod_{p.id}") for p in products]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:"
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)
        
    return OrderState.SELECT_PRODUCT

async def product_selected_for_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> OrderState:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ."""
    query = update.callback_query
    await query.answer()
    product_id_from_callback = query.data.split("_")[1]
    
    product = next((p for p in references.get_available_products() if p.id == product_id_from_callback), None)
    if not product:
        await query.edit_message_text("–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
        return await order_start(update, context)

    context.user_data['selected_product'] = product
    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: {product.name}.\n\n–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–≤ {product.unit}):")
    return OrderState.ENTER_QUANTITY

async def quantity_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> OrderState:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É."""
    try:
        quantity_str = update.message.text.replace(',', '.')
        quantity = float(quantity_str)
        if quantity <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
        
        product = context.user_data['selected_product']
        cart = context.user_data.get('cart', {})
        
        cart[product.id] = {'product': product.model_dump(by_alias=True), 'quantity': quantity}
        context.user_data['cart'] = cart
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä", callback_data="add_more")],
            [InlineKeyboardButton("üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        ]
        await update.message.reply_text(
            f"‚úÖ {product.name} ({quantity} {product.unit}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.", 
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return OrderState.CHECKOUT_OR_ADD

    except (ValueError, TypeError):
        await update.message.reply_text("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5 –∏–ª–∏ 10).")
        return OrderState.ENTER_QUANTITY

async def show_cart_and_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> OrderState | int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞."""
    query = update.callback_query
    await query.answer()
    
    cart = context.user_data.get('cart', {})
    if not cart:
        await query.edit_message_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /order")
        return ConversationHandler.END

    user = context.user_data['current_user']
    order_id = f"ORD-{int(datetime.now().timestamp())}-{user.id}"
    context.user_data['order_id'] = order_id
    
    message = "<b>üõí –í–∞—à –∑–∞–∫–∞–∑:</b>\n\n"
    total_amount = 0
    
    for item_data in cart.values():
        product = Product.model_validate(item_data['product'])
        quantity = item_data['quantity']
        item_total = product.price * quantity
        total_amount += item_total
        message += f" ‚Ä¢ {product.name}: {quantity} {product.unit} x {product.price:.2f} –≥—Ä–Ω = {item_total:.2f} –≥—Ä–Ω\n"

    message += f"\n<b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total_amount:.2f} –≥—Ä–Ω</b>\n\n"
    message += f"–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: {user.phone}\n\n"
    message += "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑?"
    context.user_data['total_amount'] = total_amount

    keyboard = [[
        InlineKeyboardButton("‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order"),
    ]]
    await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    return OrderState.CHECKOUT_OR_ADD

async def finalize_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –≤ Google Sheets –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    query = update.callback_query
    await query.answer()
    try:
        user = context.user_data['current_user']
        cart = context.user_data['cart']
        order_id = context.user_data['order_id']
        total_amount = context.user_data['total_amount']

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º 'id' –≤–º–µ—Å—Ç–æ 'order_id'
        order_row = SalesOrderRow(
            order_id=order_id,
            ts=datetime.now(),
            client_id=user.id,
            client_name=user.name,
            phone=user.phone or "-",
            status="new", 
            total_amount=total_amount
        )
        logs.append_sales_order(order_row)
        
        admin_order_details = ""
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2 (—É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
        for item_data in cart.values():
            product_obj = Product.model_validate(item_data['product'])
            
            item_row = SalesOrderItemRow(
                order_id=order_id, 
                product_id=product_obj.id, 
                product_name=product_obj.name,
                quantity=item_data['quantity'], 
                price_per_unit=product_obj.price
            )
            logs.append_sales_order_item(item_row)
            admin_order_details += f" ‚Ä¢ {item_row.product_name}: {item_row.quantity} {product_obj.unit}\n"

        references.get_all_orders.cache_clear()
        references.get_all_order_items.cache_clear()

        await query.edit_message_text(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id.split('-')[1]} –ø—Ä–∏–Ω—è—Ç! –°–ø–∞—Å–∏–±–æ, –º—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")

        admin_message = (
            f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id.split('-')[1]}</b>\n\n"
            f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {user.name}\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone}\n\n"
            f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{admin_order_details}\n"
            f"<b>–°—É–º–º–∞: {total_amount:.2f} –≥—Ä–Ω</b>"
        )
        await notify_admins(context, admin_message, parse_mode='HTML')
        
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
        await query.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ó–∞–∫–∞–∑ –Ω–µ –±—ã–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    for key in ['cart', 'selected_product', 'order_id', 'total_amount']:
        if key in context.user_data:
            del context.user_data[key]
            
    return ConversationHandler.END

client_order_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Text(ReplyButton.MAKE_ORDER), order_start)],
    states={
        OrderState.SELECT_PRODUCT: [CallbackQueryHandler(product_selected_for_order, pattern="^prod_")],
        OrderState.ENTER_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, quantity_received)],
        OrderState.CHECKOUT_OR_ADD: [
            CallbackQueryHandler(order_start, pattern="^add_more$"),
            CallbackQueryHandler(show_cart_and_confirm, pattern="^checkout$"),
            CallbackQueryHandler(finalize_order, pattern="^confirm_order$"),
            CallbackQueryHandler(cancel, pattern="^cancel_order$"),
        ]
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    allow_reentry=True
)