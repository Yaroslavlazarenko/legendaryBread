# flows/manage_feed_types.py
from app.bot.keyboards import ReplyButton
import uuid
from enum import Enum, auto
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, ConversationHandler, CommandHandler, CallbackQueryHandler, MessageHandler, filters
)
from app.bot.middleware import restricted
from app.models.user import UserRole
from app.models.feeding import FeedType
from app.sheets import references, logs
from app.bot.keyboards import create_paginated_keyboard
from .common import cancel

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ Enum –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ ---
class FeedState(Enum):
    MENU = auto()
    SELECT_ACTION = auto()
    ADD_NAME = auto()
    CONFIRM_ADD = auto()
    EDIT_NAME = auto()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π ---
async def _display_feed_type_actions(feed_id: str, update: Update, context: ContextTypes.DEFAULT_TYPE) -> FeedState:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ç–∏–ø–∞ –∫–æ—Ä–º–∞ –∏ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —Ç–æ—á–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
    """
    feed_type = references.get_feed_type_by_id(feed_id)
    if not feed_type:
        text = "–¢–∏–ø –∫–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        if update.callback_query:
            await update.callback_query.edit_message_text(text)
        else:
            await update.message.reply_text(text)
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return await feed_types_start(update, context, clear_selection=True)

    context.user_data['selected_feed_type_id'] = feed_id
    status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if feed_type.is_active else "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω"
    toggle_text = "–°–¥–µ–ª–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º" if feed_type.is_active else "–°–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º"
    
    keyboard = [
        [InlineKeyboardButton(f"üîÑ {toggle_text}", callback_data="toggle_status")],
        [InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_name")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]
    ]
    
    text = f"<b>–¢–∏–ø –∫–æ—Ä–º–∞:</b> {feed_type.name}\n<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}"
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–≤–µ—Ç–∏—Ç—å: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –º–æ–∂–Ω–æ, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')
        
    return FeedState.SELECT_ACTION

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞ ---

@restricted(allowed_roles=[UserRole.ADMIN])
async def feed_types_start(update: Update, context: ContextTypes.DEFAULT_TYPE, clear_selection: bool = False) -> FeedState:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –∫–æ—Ä–º–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    query = update.callback_query
    page = 0

    if clear_selection and 'selected_feed_type_id' in context.user_data:
        del context.user_data['selected_feed_type_id']

    if query:
        await query.answer()
        if query.data.startswith("feed_types_page_"):
            page = int(query.data.split("_")[3])
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
        elif query.data == "back_to_list" and 'selected_feed_type_id' in context.user_data:
             del context.user_data['selected_feed_type_id']


    feed_types = references.get_feed_types()
    extra_buttons = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø", callback_data="add_new")]]
    
    reply_markup = create_paginated_keyboard(
        items=feed_types, page=page, page_size=5,
        button_text_formatter=lambda ft: f"{'‚úÖ' if ft.is_active else '‚òëÔ∏è'} {ft.name}",
        button_callback_formatter=lambda ft: f"select_{ft.id}",
        pagination_callback_prefix="feed_types_page_",
        extra_buttons=extra_buttons
    )
    
    text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏ –∫–æ—Ä–º–æ–≤:"
    if query:
        await query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)
        
    return FeedState.MENU

async def select_feed_type_for_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> FeedState:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ—Ä–º–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."""
    query = update.callback_query
    await query.answer()
    feed_id = query.data.split("_")[1]
    return await _display_feed_type_actions(feed_id, update, context)

async def toggle_feed_type_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> FeedState:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–∏–ø–∞ –∫–æ—Ä–º–∞."""
    query = update.callback_query
    await query.answer()
    feed_id = context.user_data['selected_feed_type_id']
    
    feed_type = references.get_feed_type_by_id(feed_id)
    if not feed_type:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø –∫–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return await feed_types_start(update, context, clear_selection=True)

    success = references.update_feed_type_status(feed_id, not feed_type.is_active)
    if success:
        await query.edit_message_text("‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.")
    else:
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")
        
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–∏–ª—Å—è
    return await feed_types_start(update, context)

async def ask_for_new_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> FeedState:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞ –∫–æ—Ä–º–∞."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ—Ä–º–∞:")
    return FeedState.EDIT_NAME

async def save_new_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> FeedState:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π."""
    new_name = update.message.text.strip()
    if not new_name:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return FeedState.EDIT_NAME

    feed_id = context.user_data['selected_feed_type_id']
    success = references.update_feed_type_details(feed_id, 'name', new_name)
    
    await update.message.reply_text("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ." if success else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.")
    
    return await _display_feed_type_actions(feed_id, update, context)

# --- –°—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –∫–æ—Ä–º–∞ ---
    
async def add_feed_type_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> FeedState:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –∫–æ—Ä–º–∞."""
    query = update.callback_query
    await query.answer()
    context.user_data['new_feed_type_data'] = {'id': f"FEED-{uuid.uuid4().hex[:6].upper()}"}
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –∫–æ—Ä–º–∞:")
    return FeedState.ADD_NAME

async def add_feed_name_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> FeedState:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    feed_name = update.message.text.strip()
    if not feed_name:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return FeedState.ADD_NAME
        
    context.user_data['new_feed_type_data']['name'] = feed_name
    data = context.user_data['new_feed_type_data']
    
    summary = f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –∫–æ—Ä–º–∞:</b>\n\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n(ID –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"
    keyboard = [[
        InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_new"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add")
    ]]
    await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    return FeedState.CONFIRM_ADD

async def save_new_feed_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> FeedState:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π —Ç–∏–ø –∫–æ—Ä–º–∞ –≤ Google Sheets."""
    query = update.callback_query
    await query.answer()
    try:
        data = context.user_data.pop('new_feed_type_data') # –ò—Å–ø–æ–ª—å–∑—É–µ–º pop –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        feed_type = FeedType(feed_id=data['id'], name=data['name'], is_active=True)
        logs.append_feed_type(feed_type)
        references.get_feed_types.cache_clear()
        await query.edit_message_text(f"‚úÖ –¢–∏–ø –∫–æ—Ä–º–∞ '{feed_type.name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
    return await feed_types_start(update, context)


# --- ConversationHandler ---
manage_feed_types_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Text(ReplyButton.MANAGE_FEED_TYPES), feed_types_start)],
    states={
        FeedState.MENU: [
            CallbackQueryHandler(select_feed_type_for_action, pattern="^select_"),
            CallbackQueryHandler(add_feed_type_start, pattern="^add_new$"),
            CallbackQueryHandler(feed_types_start, pattern="^feed_types_page_")
        ],
        FeedState.SELECT_ACTION: [
            CallbackQueryHandler(toggle_feed_type_status, pattern="^toggle_status$"),
            CallbackQueryHandler(ask_for_new_name, pattern="^edit_name$"),
            CallbackQueryHandler(feed_types_start, pattern="^back_to_list$")
        ],
        FeedState.ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_feed_name_received)],
        FeedState.CONFIRM_ADD: [
            CallbackQueryHandler(save_new_feed_type, pattern="^save_new$"),
            CallbackQueryHandler(feed_types_start, pattern="^cancel_add$")
        ],
        FeedState.EDIT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_new_name)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    allow_reentry=True
)