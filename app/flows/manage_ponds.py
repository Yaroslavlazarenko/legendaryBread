# flows/manage_ponds.py
from app.bot.keyboards import ReplyButton
import uuid
from datetime import date
from enum import Enum, auto
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, ConversationHandler, CommandHandler, CallbackQueryHandler, MessageHandler, filters
)

from app.bot.middleware import restricted
from app.bot.keyboards import create_paginated_keyboard
from app.models.user import UserRole
from app.models.pond import Pond
from app.sheets import references, logs
from .common import cancel

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ Enum ---
class PondState(Enum):
    MENU = auto()
    SELECT_ACTION = auto()
    SELECT_EDIT_FIELD = auto()
    EDIT_FIELD_VALUE = auto()
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–¥–æ—ë–º–∞
    ADD_NAME = auto()
    ADD_TYPE = auto()
    ADD_SPECIES = auto()
    ADD_STOCKING_DATE = auto()
    ADD_INITIAL_QTY = auto()
    ADD_NOTES = auto()
    CONFIRM_ADD = auto()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def _display_pond_actions(pond_id: str, update: Update, context: ContextTypes.DEFAULT_TYPE) -> PondState:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤–æ–¥–æ—ë–º–∞ –∏ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å)."""
    pond = references.get_pond_by_id(pond_id)
    if not pond:
        text = "–í–æ–¥–æ—ë–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω."
        if update.callback_query:
            await update.callback_query.edit_message_text(text)
        else:
            await update.message.reply_text(text)
        return await ponds_start(update, context, clear_selection=True)

    context.user_data['selected_pond_id'] = pond_id
    status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if pond.is_active else "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω"
    toggle_text = "–°–¥–µ–ª–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º" if pond.is_active else "–°–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º"
    
    keyboard = [
        [InlineKeyboardButton(f"üîÑ {toggle_text}", callback_data="toggle_status")],
        [InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_data")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]
    ]
    
    details_text = (
        f"<b>–í–æ–¥–æ—ë–º:</b> {pond.name}\n"
        f"<b>–¢–∏–ø:</b> {pond.type}\n"
        f"<b>–í–∏–¥ —Ä—ã–±—ã:</b> {pond.species or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>–î–∞—Ç–∞ –∑–∞—Ä—ã–±–ª–µ–Ω–∏—è:</b> {pond.stocking_date.isoformat() if pond.stocking_date else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"<b>–ù–∞—á. –∫–æ–ª-–≤–æ:</b> {pond.initial_qty or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"<b>–ó–∞–º–µ—Ç–∫–∏:</b> {pond.notes or '–Ω–µ—Ç'}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}"
    )
    
    if update.callback_query:
        await update.callback_query.edit_message_text(details_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    else:
        await update.message.reply_text(details_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

    return PondState.SELECT_ACTION

async def _cleanup_temp_data(context: ContextTypes.DEFAULT_TYPE):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–µ—Å—Å–∏—é."""
    user_backup = context.user_data.get('current_user')
    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    keys_to_remove = ['new_pond_data', 'selected_pond_id', 'edit_field_name']
    for key in keys_to_remove:
        if key in context.user_data:
            del context.user_data[key]


# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞ ---

@restricted(allowed_roles=[UserRole.ADMIN])
async def ponds_start(update: Update, context: ContextTypes.DEFAULT_TYPE, clear_selection: bool = False) -> PondState:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–¥–æ—ë–º–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    query = update.callback_query
    page = 0

    if clear_selection and 'selected_pond_id' in context.user_data:
        del context.user_data['selected_pond_id']

    if query:
        await query.answer()
        if query.data.startswith("ponds_page_"):
            page = int(query.data.split("_")[2])
        elif query.data == "back_to_list":
             if 'selected_pond_id' in context.user_data:
                del context.user_data['selected_pond_id']

    ponds = references.get_all_ponds()
    extra_buttons = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–¥–æ—ë–º", callback_data="add_new")]]
    
    reply_markup = create_paginated_keyboard(
        items=ponds, page=page, page_size=5,
        button_text_formatter=lambda p: f"{'‚úÖ' if p.is_active else '‚òëÔ∏è'} {p.name}",
        button_callback_formatter=lambda p: f"select_{p.id}",
        pagination_callback_prefix="ponds_page_",
        extra_buttons=extra_buttons
    )
    
    text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–æ—ë–º–∞–º–∏:"
    if query:
        await query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)
        
    return PondState.MENU

async def select_pond_for_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> PondState:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–æ–¥–æ—ë–º–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."""
    query = update.callback_query
    await query.answer()
    pond_id = query.data.split("_")[1]
    return await _display_pond_actions(pond_id, update, context)

async def toggle_pond_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> PondState:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–æ–¥–æ—ë–º–∞."""
    query = update.callback_query
    await query.answer()
    pond_id = context.user_data['selected_pond_id']
    pond = references.get_pond_by_id(pond_id)
    
    if not pond:
        await query.edit_message_text("–í–æ–¥–æ—ë–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return await ponds_start(update, context, clear_selection=True)

    success = references.update_pond_status(pond_id, not pond.is_active)
    if success:
        await query.edit_message_text("‚úÖ –°—Ç–∞—Ç—É—Å –≤–æ–¥–æ—ë–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.")
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")
    
    return await ponds_start(update, context)

# --- –°—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–¥–æ—ë–º–∞ ---
async def add_pond_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> PondState:
    query = update.callback_query
    await query.answer()
    # Use 'pond_id' as the key to be consistent
    context.user_data['new_pond_data'] = {'pond_id': f"POND-{uuid.uuid4().hex[:6].upper()}"} 
    await query.edit_message_text("<b>–®–∞–≥ 1/6:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–¥–æ—ë–º–∞:", parse_mode='HTML')
    return PondState.ADD_NAME

async def add_name_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> PondState:
    context.user_data['new_pond_data']['name'] = update.message.text.strip()
    keyboard = [[
        InlineKeyboardButton("–ü—Ä—É–¥", callback_data="type_pond"),
        InlineKeyboardButton("–ë–∞—Å—Å–µ–π–Ω", callback_data="type_pool"),
        InlineKeyboardButton("–î—Ä—É–≥–æ–π", callback_data="type_other"),
    ]]
    await update.message.reply_text("<b>–®–∞–≥ 2/6:</b> –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–¥–æ—ë–º–∞:", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    return PondState.ADD_TYPE

async def add_type_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> PondState:
    query = update.callback_query
    await query.answer()
    context.user_data['new_pond_data']['type'] = query.data.split("_")[1]
    await query.edit_message_text("<b>–®–∞–≥ 3/6:</b> –í–≤–µ–¥–∏—Ç–µ –≤–∏–¥ —Ä—ã–±—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ö–∞—Ä–ø, –§–æ—Ä–µ–ª—å). –ï—Å–ª–∏ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç':", parse_mode='HTML')
    return PondState.ADD_SPECIES

### –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ###
async def add_species_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> PondState:
    species = update.message.text.strip()
    context.user_data['new_pond_data']['species'] = species if species.lower() != '–Ω–µ—Ç' else None
    await update.message.reply_text("<b>–®–∞–≥ 4/6:</b> –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞—Ä—ã–±–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î. –ï—Å–ª–∏ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç':", parse_mode='HTML')
    return PondState.ADD_STOCKING_DATE

async def add_stocking_date_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> PondState:
    date_str = update.message.text.strip()
    if date_str.lower() == '–Ω–µ—Ç':
        context.user_data['new_pond_data']['stocking_date'] = None
    else:
        try:
            context.user_data['new_pond_data']['stocking_date'] = date.fromisoformat(date_str)
        except ValueError:
            await update.message.reply_text("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ '–Ω–µ—Ç'.")
            return PondState.ADD_STOCKING_DATE
            
    await update.message.reply_text("<b>–®–∞–≥ 5/6:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ã–±—ã (—à—Ç). –ï—Å–ª–∏ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç':", parse_mode='HTML')
    return PondState.ADD_INITIAL_QTY

async def add_initial_qty_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> PondState:
    qty_str = update.message.text.strip()
    if qty_str.lower() == '–Ω–µ—Ç':
        context.user_data['new_pond_data']['initial_qty'] = None
    else:
        try:
            qty = int(qty_str)
            if qty < 0: raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            context.user_data['new_pond_data']['initial_qty'] = qty
        except (ValueError, TypeError):
            await update.message.reply_text("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ '–Ω–µ—Ç'.")
            return PondState.ADD_INITIAL_QTY
            
    await update.message.reply_text("<b>–®–∞–≥ 6/6:</b> –í–≤–µ–¥–∏—Ç–µ –ª—é–±—ã–µ –∑–∞–º–µ—Ç–∫–∏ –æ –≤–æ–¥–æ—ë–º–µ. –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç':", parse_mode='HTML')
    return PondState.ADD_NOTES
### –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ###

async def add_notes_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> PondState:
    notes = update.message.text
    context.user_data['new_pond_data']['notes'] = notes if notes.lower() != '–Ω–µ—Ç' else ""
    data = context.user_data['new_pond_data']
    summary = (
        f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –≤–æ–¥–æ—ë–º–∞:</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>–¢–∏–ø:</b> {data['type']}\n"
        f"<b>–í–∏–¥ —Ä—ã–±—ã:</b> {data.get('species') or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>–î–∞—Ç–∞ –∑–∞—Ä—ã–±–ª–µ–Ω–∏—è:</b> {data.get('stocking_date').isoformat() if data.get('stocking_date') else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"<b>–ù–∞—á. –∫–æ–ª-–≤–æ:</b> {data.get('initial_qty') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n<b>–ó–∞–º–µ—Ç–∫–∏:</b> {data['notes'] or '–Ω–µ—Ç'}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω"
    )
    keyboard = [[
        InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_new"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add")
    ]]
    await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    return PondState.CONFIRM_ADD

async def save_new_pond(update: Update, context: ContextTypes.DEFAULT_TYPE) -> PondState:
    query = update.callback_query
    await query.answer()
    try:
        data = context.user_data.pop('new_pond_data', {})
        # This now correctly matches the dictionary key and the model field
        pond = Pond(
            pond_id=data['pond_id'], name=data['name'], type=data['type'], 
            species=data.get('species'), stocking_date=data.get('stocking_date'),
            initial_qty=data.get('initial_qty'), notes=data.get('notes', ''), is_active=True
        )
        logs.append_pond(pond)
        references.get_all_ponds.cache_clear()
        await query.edit_message_text(f"‚úÖ –í–æ–¥–æ—ë–º '{pond.name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
    await _cleanup_temp_data(context)
    return await ponds_start(update, context)

# --- –°—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
async def edit_pond_data_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> PondState:
    query = update.callback_query
    await query.answer()
    pond_id = context.user_data['selected_pond_id']
    
    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_name")],
        [InlineKeyboardButton("–¢–∏–ø", callback_data="edit_type")],
        [InlineKeyboardButton("–í–∏–¥ —Ä—ã–±—ã", callback_data="edit_species")],
        [InlineKeyboardButton("–î–∞—Ç—É –∑–∞—Ä—ã–±–ª–µ–Ω–∏—è", callback_data="edit_stocking_date")],
        [InlineKeyboardButton("–ù–∞—á. –∫–æ–ª-–≤–æ", callback_data="edit_initial_qty")],
        [InlineKeyboardButton("–ó–∞–º–µ—Ç–∫–∏", callback_data="edit_notes")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_actions_{pond_id}")]
    ]
    await query.edit_message_text(f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))
    return PondState.SELECT_EDIT_FIELD

async def ask_for_new_field_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> PondState:
    query = update.callback_query
    await query.answer()
    field_name = query.data.split("_")[1]
    context.user_data['edit_field_name'] = field_name
    
    prompts = {
        'name': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", 'type': "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –≤–æ–¥–æ—ë–º–∞:",
        'species': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–∏–¥ —Ä—ã–±—ã (–∏–ª–∏ '–Ω–µ—Ç'):",
        'stocking_date': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ '–Ω–µ—Ç'):",
        'initial_qty': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ (–∏–ª–∏ '–Ω–µ—Ç'):",
        'notes': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ (–∏–ª–∏ '–Ω–µ—Ç'):"
    }
    
    if field_name == 'type':
        keyboard = [[
            InlineKeyboardButton("–ü—Ä—É–¥", callback_data="new_val_pond"),
            InlineKeyboardButton("–ë–∞—Å—Å–µ–π–Ω", callback_data="new_val_pool"),
            InlineKeyboardButton("–î—Ä—É–≥–æ–π", callback_data="new_val_other"),
        ]]
        await query.edit_message_text(prompts[field_name], reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await query.edit_message_text(prompts[field_name])
        
    return PondState.EDIT_FIELD_VALUE

async def receive_and_update_field_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> PondState:
    pond_id = context.user_data['selected_pond_id']
    field_name = context.user_data.pop('edit_field_name', None)
    if not field_name:
        return await _display_pond_actions(pond_id, update, context)

    new_value_raw = ""
    source_message = None
    if update.callback_query:
        await update.callback_query.answer()
        new_value_raw = update.callback_query.data.split("new_val_")[1]
        source_message = update.callback_query.message
    elif update.message:
        new_value_raw = update.message.text.strip()
        source_message = update.message
    
    try:
        new_value = new_value_raw
        if new_value_raw.lower() == '–Ω–µ—Ç' and field_name not in ['name', 'type', 'notes']:
            new_value = None
        elif new_value_raw.lower() == '–Ω–µ—Ç' and field_name == 'notes':
            new_value = ""
        elif field_name == 'stocking_date':
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ date, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç, –Ω–æ —Ö—Ä–∞–Ω–∏–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            new_value = date.fromisoformat(new_value_raw).isoformat()
        elif field_name == 'initial_qty':
            qty = int(new_value_raw)
            if qty < 0: raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            new_value = qty
        
        success = references.update_pond_details(pond_id, field_name, new_value)
        if not success: raise Exception("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É.")
        
        reply_message = f"‚úÖ –ü–æ–ª–µ '{field_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ."

    except ValueError as e:
        reply_message = f"‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∑–¥–µ—Å—å ---
        await source_message.reply_text(reply_message)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–æ—Ç –∂–µ —à–∞–≥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        context.user_data['edit_field_name'] = field_name # <-- –í–∞–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª–µ –æ–±—Ä–∞—Ç–Ω–æ
        return PondState.EDIT_FIELD_VALUE
    except Exception as e:
        reply_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

    # –≠—Ç–æ—Ç –±–ª–æ–∫ —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
    await source_message.reply_text(reply_message)
    return await _display_pond_actions(pond_id, update, context)

# --- ConversationHandler ---
ponds_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Text(ReplyButton.MANAGE_PONDS), ponds_start)],
    states={
        PondState.MENU: [
            CallbackQueryHandler(select_pond_for_action, pattern="^select_"),
            CallbackQueryHandler(add_pond_start, pattern="^add_new$"),
            CallbackQueryHandler(ponds_start, pattern="^ponds_page_")
        ],
        PondState.SELECT_ACTION: [
            CallbackQueryHandler(toggle_pond_status, pattern="^toggle_status$"),
            CallbackQueryHandler(edit_pond_data_start, pattern="^edit_data$"),
            CallbackQueryHandler(ponds_start, pattern="^back_to_list$")
        ],
        # –°—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        PondState.ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_name_received)],
        PondState.ADD_TYPE: [CallbackQueryHandler(add_type_received, pattern="^type_")],
        PondState.ADD_SPECIES: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_species_received)],
        PondState.ADD_STOCKING_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_stocking_date_received)],
        PondState.ADD_INITIAL_QTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_initial_qty_received)],
        PondState.ADD_NOTES: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_notes_received)],
        PondState.CONFIRM_ADD: [
            CallbackQueryHandler(save_new_pond, pattern="^save_new$"),
            CallbackQueryHandler(ponds_start, pattern="^cancel_add$")
        ],
        # –°—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        PondState.SELECT_EDIT_FIELD: [
            CallbackQueryHandler(ask_for_new_field_value, pattern="^edit_"),
            CallbackQueryHandler(select_pond_for_action, pattern=r"^back_to_actions_")
        ],
        PondState.EDIT_FIELD_VALUE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, receive_and_update_field_value),
            CallbackQueryHandler(receive_and_update_field_value, pattern="^new_val_")
        ]
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    allow_reentry=True
)