# flows/manage_products.py
from app.bot.keyboards import ReplyButton
import uuid
from enum import Enum, auto
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, ConversationHandler, CommandHandler, CallbackQueryHandler, MessageHandler, filters
)

from app.bot.middleware import restricted
from app.models.user import UserRole
from app.models.product import Product
from app.sheets import references, logs
from app.bot.keyboards import create_paginated_keyboard
from .common import cancel

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ Enum ---
class ProductState(Enum):
    MENU = auto()
    SELECT_ACTION = auto()
    SELECT_EDIT_FIELD = auto()
    EDIT_FIELD_VALUE = auto()
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    ADD_NAME = auto()
    ADD_DESC = auto()
    ADD_PRICE = auto()
    ADD_UNIT = auto()
    CONFIRM_ADD = auto()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def _display_product_actions(product_id: str, update: Update, context: ContextTypes.DEFAULT_TYPE) -> ProductState:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞ –∏ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å)."""
    product = references.get_product_by_id(product_id)
    if not product:
        text = "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω."
        if update.callback_query:
            await update.callback_query.edit_message_text(text)
        else:
            await update.message.reply_text(text)
        return await products_start(update, context, clear_selection=True)

    context.user_data['selected_product_id'] = product_id
    status_text = "–î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞" if product.is_available else "–ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞"
    toggle_text = "–°–¥–µ–ª–∞—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º" if product.is_available else "–°–¥–µ–ª–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º"
    
    keyboard = [
        [InlineKeyboardButton(f"üîÑ {toggle_text}", callback_data="toggle_status")],
        [InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_data")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]
    ]
    
    details_text = (
        f"<b>–¢–æ–≤–∞—Ä:</b> {product.name}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product.description}\n"
        f"<b>–¶–µ–Ω–∞:</b> {product.get_display_price()}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}"
    )

    if update.callback_query:
        await update.callback_query.edit_message_text(details_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    else:
        await update.message.reply_text(details_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        
    return ProductState.SELECT_ACTION

async def _cleanup_temp_data(context: ContextTypes.DEFAULT_TYPE):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    keys_to_remove = ['new_product', 'selected_product_id', 'edit_field']
    for key in keys_to_remove:
        if key in context.user_data:
            del context.user_data[key]

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞ ---

@restricted(allowed_roles=[UserRole.ADMIN])
async def products_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ProductState:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (–ë–ï–ó –ª–æ–≥–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏)."""
    query = update.callback_query
    page = 0

    if query:
        await query.answer()
        if query.data.startswith("products_page_"):
            page = int(query.data.split("_")[2])

    products = references.get_all_products()
    
    extra_buttons = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä", callback_data="add_new")]]
    
    reply_markup = create_paginated_keyboard(
        items=products, page=page, page_size=5,
        button_text_formatter=lambda p: f"{'‚úÖ' if p.is_available else '‚òëÔ∏è'} {p.name}",
        button_callback_formatter=lambda p: f"select_{p.id}",
        pagination_callback_prefix="products_page_",
        extra_buttons=extra_buttons
    )
    
    text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:"
    if query:
        await query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)
        
    return ProductState.MENU

async def back_to_product_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ProductState:
    """–û—á–∏—â–∞–µ—Ç ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É."""
    if 'selected_product_id' in context.user_data:
        del context.user_data['selected_product_id']
    
    # –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
    return await products_start(update, context)

async def select_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ProductState:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."""
    query = update.callback_query
    await query.answer()
    product_id = query.data.split("_")[1]
    return await _display_product_actions(product_id, update, context)

async def toggle_product_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ProductState:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞."""
    query = update.callback_query
    await query.answer()
    prod_id = context.user_data['selected_product_id']
    product = references.get_product_by_id(prod_id)
    
    success = references.update_product_status(prod_id, not product.is_available)
    if success:
        await query.edit_message_text("‚úÖ –°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.")
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")
    
    return await products_start(update, context)

# --- –°—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
async def edit_product_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ProductState:
    query = update.callback_query
    await query.answer()
    prod_id = context.user_data['selected_product_id']
    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_name")],
        [InlineKeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description")],
        [InlineKeyboardButton("–¶–µ–Ω—É", callback_data="edit_price")],
        [InlineKeyboardButton("–ï–¥. –∏–∑–º.", callback_data="edit_unit")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_actions_{prod_id}")]
    ]
    await query.edit_message_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))
    return ProductState.SELECT_EDIT_FIELD

async def ask_for_new_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ProductState:
    query = update.callback_query
    await query.answer()
    field = query.data.split("_")[1]
    context.user_data['edit_field'] = field
    prompts = {
        'name': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", 'description': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
        'price': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150.50):", 'unit': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–≥):"
    }
    await query.edit_message_text(prompts.get(field, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"))
    return ProductState.EDIT_FIELD_VALUE

async def save_edited_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ProductState:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞."""
    field = context.user_data.pop('edit_field', None)
    prod_id = context.user_data['selected_product_id']
    if not field:
        return await _display_product_actions(prod_id, update, context)

    new_value_raw = update.message.text.strip()
    if not new_value_raw:
        await update.message.reply_text("–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        context.user_data['edit_field'] = field # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        return ProductState.EDIT_FIELD_VALUE

    try:
        new_value = new_value_raw
        if field == 'price':
            price = float(new_value_raw.replace(',', '.'))
            if price <= 0: raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
            new_value = price
        
        success = references.update_product_details(prod_id, field, new_value)
        if not success: raise Exception("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É.")
        
        await update.message.reply_text(f"‚úÖ –ü–æ–ª–µ '{field}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
            
    except (ValueError, TypeError):
        await update.message.reply_text(f"‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        context.user_data['edit_field'] = field
        return ProductState.EDIT_FIELD_VALUE
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    return await _display_product_actions(prod_id, update, context)

# --- –°—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ ---
async def add_product_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ProductState:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("<b>–®–∞–≥ 1/4:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:", parse_mode='HTML')
    return ProductState.ADD_NAME

async def add_name_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ProductState:
    name = update.message.text.strip()
    if not name:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ProductState.ADD_NAME
    context.user_data['new_product'] = {'name': name}
    await update.message.reply_text("<b>–®–∞–≥ 2/4:</b> –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", parse_mode='HTML')
    return ProductState.ADD_DESC

async def add_desc_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ProductState:
    desc = update.message.text.strip()
    if not desc:
        await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ProductState.ADD_DESC
    context.user_data['new_product']['description'] = desc
    await update.message.reply_text("<b>–®–∞–≥ 3/4:</b> –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150.50):", parse_mode='HTML')
    return ProductState.ADD_PRICE

async def add_price_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ProductState:
    try:
        price = float(update.message.text.replace(',', '.'))
        if price <= 0: raise ValueError
        context.user_data['new_product']['price'] = price
        await update.message.reply_text("<b>–®–∞–≥ 4/4:</b> –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: –≤–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–≥, —à—Ç):", parse_mode='HTML')
        return ProductState.ADD_UNIT
    except (ValueError, TypeError):
        await update.message.reply_text("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return ProductState.ADD_PRICE

async def add_unit_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ProductState:
    unit = update.message.text.strip()
    if not unit:
        await update.message.reply_text("–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ProductState.ADD_UNIT
    context.user_data['new_product']['unit'] = unit
    data = context.user_data['new_product']
    summary = (
        f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
        f"<b>–¶–µ–Ω–∞:</b> {data['price']:.2f} –≥—Ä–Ω\n"
        f"<b>–ï–¥.–∏–∑–º.:</b> {data['unit']}"
    )
    keyboard = [[
        InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_new"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add")
    ]]
    await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    return ProductState.CONFIRM_ADD

async def save_new_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ProductState:
    query = update.callback_query
    await query.answer()
    try:
        data = context.user_data.pop('new_product', {})
        product = Product(
            product_id=f"PROD-{uuid.uuid4().hex[:6].upper()}",
            name=data['name'], description=data['description'],
            price=data['price'], unit=data['unit'], is_available=True
        )
        logs.append_product(product)
        references.get_all_products.cache_clear()
        await query.edit_message_text(f"‚úÖ –¢–æ–≤–∞—Ä '{product.name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
    await _cleanup_temp_data(context) # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    return await products_start(update, context)

# --- ConversationHandler ---
products_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Text(ReplyButton.MANAGE_PRODUCTS), products_start)],
    states={
        ProductState.MENU: [
            CallbackQueryHandler(select_product, pattern="^select_"),
            CallbackQueryHandler(add_product_start, pattern="^add_new$"),
            CallbackQueryHandler(products_start, pattern="^products_page_")
        ],
        ProductState.SELECT_ACTION: [
            CallbackQueryHandler(toggle_product_status, pattern="^toggle_status$"),
            CallbackQueryHandler(edit_product_start, pattern="^edit_data$"),
            CallbackQueryHandler(back_to_product_list, pattern="^back_to_list$")
        ],
        # –°—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        ProductState.ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_name_received)],
        ProductState.ADD_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_desc_received)],
        ProductState.ADD_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_price_received)],
        ProductState.ADD_UNIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_unit_received)],
        ProductState.CONFIRM_ADD: [
            CallbackQueryHandler(save_new_product, pattern="^save_new$"),
            CallbackQueryHandler(products_start, pattern="^cancel_add$")
        ],
        # –°—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ProductState.SELECT_EDIT_FIELD: [
            CallbackQueryHandler(ask_for_new_value, pattern="^edit_"),
            CallbackQueryHandler(select_product, pattern=r"^back_to_actions_")
        ],
        ProductState.EDIT_FIELD_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_edited_value)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    allow_reentry=True
)