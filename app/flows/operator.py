# app/flows/operator.py

from app.bot.keyboards import ReplyButton
from datetime import datetime
from enum import Enum, auto
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    CommandHandler,
)
from app.bot.middleware import restricted
from app.models.user import UserRole
from app.models.water import WaterQualityRow
from app.models.feeding import FeedingRow
from app.models.weighing import WeighingRow
from app.models.fish import FishMoveRow, FishMoveType
from app.sheets import references, logs
from app.bot.notifications import notify_admins
from app.utils.logger import log
from .common import cancel, ask_for_pond_selection


class State(Enum):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ ConversationHandler –≤ —ç—Ç–æ–º –º–æ–¥—É–ª–µ.
    """
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –∑–∞–º–µ—Ä–∞ –≤–æ–¥—ã
    SELECT_POND_W = auto()
    ENTER_DO = auto()
    ENTER_TEMP = auto()
    CONFIRM_WATER = auto()

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è
    SELECT_POND_F = auto()
    SELECT_FEED = auto()
    ENTER_MASS_F = auto()
    CONFIRM_FEED = auto()

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è
    SELECT_POND_WGH = auto()
    ENTER_WEIGHT = auto()
    CONFIRM_WEIGHING = auto()

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–≤–∏–∂–µ–Ω–∏—è —Ä—ã–±—ã
    SELECT_POND_FM_SRC = auto()
    SELECT_MOVE_TYPE = auto()
    SELECT_POND_FM_DEST = auto()
    ENTER_QUANTITY_FM = auto()
    ENTER_AVG_WEIGHT_FM = auto()
    ENTER_REASON_FM = auto()
    ENTER_REF_FM = auto()
    CONFIRM_FISH_MOVE = auto()


# === –°–¶–ï–ù–ê–†–ò–ô –ó–ê–ú–ï–†–ê –í–û–î–´ ===

@restricted(allowed_roles=[UserRole.OPERATOR, UserRole.ADMIN])
async def water_quality_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    if await ask_for_pond_selection(update, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–æ—ë–º –¥–ª—è –∑–∞–º–µ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–æ–¥—ã:"):
        return State.SELECT_POND_W
    return ConversationHandler.END


async def pond_selected_for_water(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    query = update.callback_query
    await query.answer()
    pond_id = query.data.split("_")[1]
    pond = next((p for p in references.get_active_ponds() if p.id == pond_id), None)
    if not pond:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –≤–æ–¥–æ—ë–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    context.user_data['pond'] = pond
    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω –≤–æ–¥–æ—ë–º: {pond.name}.\n\n–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ DO, –º–≥/–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8.5):")
    return State.ENTER_DO


async def do_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    try:
        do_value = float(update.message.text.replace(',', '.'))
        WaterQualityRow.model_validate({'ts': datetime.now(), 'pond_id': 'test', 'dissolved_O2_mgL': do_value, 'temperature_C': 10, 'user': 'test'})
        context.user_data['do'] = do_value
        await update.message.reply_text("‚úÖ DO –ø—Ä–∏–Ω—è—Ç–æ.\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, ¬∞C (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.2):")
        return State.ENTER_TEMP
    except (ValueError, TypeError):
        await update.message.reply_text("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8.5).")
        return State.ENTER_DO


async def temp_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    try:
        temp_value = float(update.message.text.replace(',', '.'))
        WaterQualityRow.model_validate({'ts': datetime.now(), 'pond_id': 'test', 'dissolved_O2_mgL': 10, 'temperature_C': temp_value, 'user': 'test'})
        context.user_data['temp'] = temp_value

        summary = (f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
                   f"–í–æ–¥–æ—ë–º: {context.user_data['pond'].name}\n"
                   f"DO: {context.user_data['do']} –º–≥/–ª\n"
                   f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_value} ¬∞C")
        keyboard = [[InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_save"), InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_op")]]
        await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(keyboard))
        return State.CONFIRM_WATER
    except (ValueError, TypeError):
        await update.message.reply_text("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.2).")
        return State.ENTER_TEMP


async def save_water_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    try:
        row_data = WaterQualityRow(
            ts=datetime.now(),
            pond_id=context.user_data['pond'].id,
            dissolved_O2_mgL=context.user_data['do'],
            temperature_C=context.user_data['temp'],
            user=f"{context.user_data['current_user'].name} ({context.user_data['current_user'].id})"
        )
        logs.append_water_quality(row_data)
        if row_data.is_critical():
            alert_message = (f"üö® –í–ù–ò–ú–ê–ù–ò–ï! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–¥—ã!\n"
                             f"–í–æ–¥–æ—ë–º: {context.user_data['pond'].name}\n"
                             f"DO: {row_data.dissolved_O2_mgL} –º–≥/–ª\n"
                             f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {row_data.temperature_C} ¬∞C")
            await notify_admins(context, alert_message)
            
            await query.edit_message_text(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –∫—Ä–∏—Ç. –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö.")
        else:
            await query.edit_message_text("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–¥–µ: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
    context.user_data.clear()
    return ConversationHandler.END


water_quality_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Text(ReplyButton.WATER_QUALITY), water_quality_start)],
    states={
        State.SELECT_POND_W: [CallbackQueryHandler(pond_selected_for_water, pattern="^pond_")],
        State.ENTER_DO: [MessageHandler(filters.TEXT & ~filters.COMMAND, do_received)],
        State.ENTER_TEMP: [MessageHandler(filters.TEXT & ~filters.COMMAND, temp_received)],
        State.CONFIRM_WATER: [CallbackQueryHandler(save_water_data, pattern="^confirm_save$"), CallbackQueryHandler(cancel, pattern="^cancel_op$")],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    allow_reentry=True
)

# === –°–¶–ï–ù–ê–†–ò–ô –ö–û–†–ú–õ–ï–ù–ò–Ø ===

@restricted(allowed_roles=[UserRole.OPERATOR, UserRole.ADMIN])
async def feeding_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    if await ask_for_pond_selection(update, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–æ—ë–º –¥–ª—è –∫–æ—Ä–º–ª–µ–Ω–∏—è:"):
        return State.SELECT_POND_F
    return ConversationHandler.END


async def pond_selected_for_feeding(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    query = update.callback_query
    await query.answer()
    pond_id = query.data.split("_")[1]

    pond = next((p for p in references.get_active_ponds() if p.id == pond_id), None)
    if not pond:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –≤–æ–¥–æ—ë–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    context.user_data['pond'] = pond

    feed_types = references.get_active_feed_types()
    if not feed_types:
        await query.edit_message_text("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ—Ä–º–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton(ft.name, callback_data=f"feed_{ft.id}")] for ft in feed_types]
    await query.edit_message_text(f"–í–æ–¥–æ—ë–º: {pond.name}.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ—Ä–º–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
    return State.SELECT_FEED


async def feed_type_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    query = update.callback_query
    await query.answer()
    feed_id = query.data.split("_")[1]

    feed_type = next((ft for ft in references.get_active_feed_types() if ft.id == feed_id), None)
    if not feed_type:
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Ç–∏–ø –∫–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    context.user_data['feed_type'] = feed_type

    await query.edit_message_text(f"–ö–æ—Ä–º: {feed_type.name}.\n\n–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å—É –∫–æ—Ä–º–∞ –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.5):")
    return State.ENTER_MASS_F


async def mass_received_feeding(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    try:
        mass = float(update.message.text.replace(',', '.'))
        FeedingRow.model_validate({'ts': datetime.now(), 'pond_id': 'test', 'feed_type': 'test', 'mass_kg': mass, 'user': 'test'})
        context.user_data['mass'] = mass

        summary = (f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
                   f"–í–æ–¥–æ—ë–º: {context.user_data['pond'].name}\n"
                   f"–ö–æ—Ä–º: {context.user_data['feed_type'].name}\n"
                   f"–ú–∞—Å—Å–∞: {mass} –∫–≥")
        keyboard = [[InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_save"), InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_op")]]
        await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(keyboard))
        return State.CONFIRM_FEED
    except (ValueError, TypeError):
        await update.message.reply_text("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return State.ENTER_MASS_F


async def save_feeding_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    try:
        row = FeedingRow(
            ts=datetime.now(),
            pond_id=context.user_data['pond'].id,
            feed_type=context.user_data['feed_type'].name,
            mass_kg=context.user_data['mass'],
            user=f"{context.user_data['current_user'].name} ({context.user_data['current_user'].id})"
        )
        logs.append_feeding(row)
        await query.edit_message_text("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
    context.user_data.clear()
    return ConversationHandler.END


feeding_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Text(ReplyButton.FEEDING), feeding_start)],
    states={
        State.SELECT_POND_F: [CallbackQueryHandler(pond_selected_for_feeding, pattern="^pond_")],
        State.SELECT_FEED: [CallbackQueryHandler(feed_type_selected, pattern="^feed_")],
        State.ENTER_MASS_F: [MessageHandler(filters.TEXT & ~filters.COMMAND, mass_received_feeding)],
        State.CONFIRM_FEED: [CallbackQueryHandler(save_feeding_data, pattern="^confirm_save$"), CallbackQueryHandler(cancel, pattern="^cancel_op$")],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    allow_reentry=True
)

# === –ö–û–ù–¢–†–û–õ–¨–ù–û–ï –í–ó–í–ï–®–ò–í–ê–ù–ò–ï ===

@restricted(allowed_roles=[UserRole.OPERATOR, UserRole.ADMIN])
async def weighing_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    if await ask_for_pond_selection(update, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–æ—ë–º –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è:"):
        return State.SELECT_POND_WGH
    return ConversationHandler.END


async def pond_selected_for_weighing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    query = update.callback_query
    await query.answer()
    pond_id = query.data.split("_")[1]
    pond = next((p for p in references.get_active_ponds() if p.id == pond_id), None)
    if not pond:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –≤–æ–¥–æ—ë–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    context.user_data['pond'] = pond
    await query.edit_message_text(f"–í–æ–¥–æ—ë–º: {pond.name}.\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å –æ–¥–Ω–æ–π —Ä—ã–±—ã –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 350.5):")
    return State.ENTER_WEIGHT


async def weight_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    try:
        weight = float(update.message.text.replace(',', '.'))
        WeighingRow.model_validate({'ts': datetime.now(), 'pond_id': 'test', 'avg_weight_g': weight, 'user': 'test'})
        context.user_data['weight'] = weight

        summary = (f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
                   f"–í–æ–¥–æ—ë–º: {context.user_data['pond'].name}\n"
                   f"–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å: {weight} –≥")
        keyboard = [[InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_save"), InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_op")]]
        await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(keyboard))
        return State.CONFIRM_WEIGHING

    except (ValueError, TypeError):
        await update.message.reply_text("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return State.ENTER_WEIGHT


async def save_weighing_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    try:
        row = WeighingRow(
            ts=datetime.now(),
            pond_id=context.user_data['pond'].id,
            avg_weight_g=context.user_data['weight'],
            user=f"{context.user_data['current_user'].name} ({context.user_data['current_user'].id})"
        )
        logs.append_weighing(row)
        await query.edit_message_text(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–∏ –¥–ª—è –≤–æ–¥–æ—ë–º–∞ '{context.user_data['pond'].name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–∏: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")

    context.user_data.clear()
    return ConversationHandler.END


weighing_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Text(ReplyButton.WEIGHING), weighing_start)],
    states={
        State.SELECT_POND_WGH: [CallbackQueryHandler(pond_selected_for_weighing, pattern="^pond_")],
        State.ENTER_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, weight_received)],
        State.CONFIRM_WEIGHING: [
            CallbackQueryHandler(save_weighing_data, pattern="^confirm_save$"),
            CallbackQueryHandler(cancel, pattern="^cancel_op$")
        ],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    allow_reentry=True
)

# === –°–¶–ï–ù–ê–†–ò–ô: –î–í–ò–ñ–ï–ù–ò–ï –†–´–ë–´ ===

@restricted(allowed_roles=[UserRole.OPERATOR, UserRole.ADMIN])
async def fish_move_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    # –®–∞–≥ 1: –í—ã–±–æ—Ä –ò–°–•–û–î–ù–û–ì–û –≤–æ–¥–æ—ë–º–∞
    if await ask_for_pond_selection(update, "–í—ã–±–µ—Ä–∏—Ç–µ –ò–°–•–û–î–ù–´–ô –≤–æ–¥–æ—ë–º –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è —Ä—ã–±—ã:"):
        return State.SELECT_POND_FM_SRC
    return ConversationHandler.END


async def pond_src_selected_for_move(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    # –®–∞–≥ 2: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    query = update.callback_query
    await query.answer()
    pond_id = query.data.split("_")[1]
    pond = next((p for p in references.get_active_ponds() if p.id == pond_id), None)
    if not pond:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –≤–æ–¥–æ—ë–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    context.user_data['pond_src'] = pond  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∏—Å—Ö–æ–¥–Ω—ã–π

    keyboard = [
        [InlineKeyboardButton("üêü –ó–∞—Ä—ã–±–ª–µ–Ω–∏–µ", callback_data=f"move_{FishMoveType.STOCKING.value}")],
        [InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞–∂–∞", callback_data=f"move_{FishMoveType.SALE.value}")],
        [InlineKeyboardButton("‚ò†Ô∏è –ì–∏–±–µ–ª—å", callback_data=f"move_{FishMoveType.DEATH.value}")],
        [InlineKeyboardButton("‚û°Ô∏è –ü–µ—Ä–µ–≤–æ–¥ –≤ –¥—Ä—É–≥–æ–π –≤–æ–¥–æ—ë–º", callback_data="move_transfer")]
    ]
    await query.edit_message_text(f"–í–æ–¥–æ—ë–º-–∏—Å—Ç–æ—á–Ω–∏–∫: {pond.name}.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
    return State.SELECT_MOVE_TYPE


async def move_type_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    # –®–∞–≥ 3: –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ - –≤—ã–±–æ—Ä –≤–æ–¥–æ—ë–º–∞-–ø–æ–ª—É—á–∞—Ç–µ–ª—è, –∏–Ω–∞—á–µ - –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    query = update.callback_query
    await query.answer()

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–µ–≤–æ–¥
    if query.data != "move_transfer":
        move_type = FishMoveType(query.data.split("_")[1])
        context.user_data['move_type'] = move_type
        # –î–ª—è –∑–∞—Ä—ã–±–ª–µ–Ω–∏—è –Ω–µ –Ω—É–∂–µ–Ω –≤–æ–¥–æ–µ–º-–∏—Å—Ç–æ—á–Ω–∏–∫, –æ–Ω –∏ –µ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—å
        if move_type == FishMoveType.STOCKING:
            context.user_data['pond_dest'] = context.user_data['pond_src']
            del context.user_data['pond_src']
            await query.edit_message_text(f"–û–ø–µ—Ä–∞—Ü–∏—è: –ó–∞—Ä—ã–±–ª–µ–Ω–∏–µ.\n–í–æ–¥–æ—ë–º: {context.user_data['pond_dest'].name}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ã–±—ã (—à—Ç):")
        else:
            await query.edit_message_text(f"–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {move_type.value}.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ã–±—ã (—à—Ç):")
        return State.ENTER_QUANTITY_FM

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–≤–æ–¥ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–¥–æ—ë–º-–ø–æ–ª—É—á–∞—Ç–µ–ª—å
    context.user_data['move_type'] = 'transfer'  # —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥
    pond_src = context.user_data['pond_src']

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–¥–æ–µ–º—ã, –∫—Ä–æ–º–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ
    other_ponds = [p for p in references.get_active_ponds() if p.id != pond_src.id]

    if not other_ponds:
        await query.edit_message_text("–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–æ—ë–º–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton(p.name, callback_data=f"ponddest_{p.id}")] for p in other_ponds]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–æ—ë–º-–ü–û–õ–£–ß–ê–¢–ï–õ–¨:", reply_markup=InlineKeyboardMarkup(keyboard))
    return State.SELECT_POND_FM_DEST


async def pond_dest_selected_for_move(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    # –®–∞–≥ 3.1: –ü–æ–ª—É—á–∏–ª–∏ –≤–æ–¥–æ–µ–º-–ø–æ–ª—É—á–∞—Ç–µ–ª—å, —Ç–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    query = update.callback_query
    await query.answer()
    pond_id = query.data.split("_")[1]
    pond_dest = next((p for p in references.get_active_ponds() if p.id == pond_id), None)
    if not pond_dest:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –≤–æ–¥–æ—ë–º-–ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    context.user_data['pond_dest'] = pond_dest

    pond_src = context.user_data['pond_src']
    await query.edit_message_text(
        f"–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ '{pond_src.name}' –≤ '{pond_dest.name}'.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ã–±—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (—à—Ç):"
    )
    return State.ENTER_QUANTITY_FM


async def quantity_received_fm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    try:
        quantity = int(update.message.text)
        if quantity <= 0: raise ValueError
        context.user_data['quantity'] = quantity
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å –æ–¥–Ω–æ–π —Ä—ã–±—ã –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º–æ–∂–Ω–æ 0):")
        return State.ENTER_AVG_WEIGHT_FM
    except (ValueError, TypeError):
        await update.message.reply_text("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return State.ENTER_QUANTITY_FM


async def avg_weight_received_fm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    try:
        weight = float(update.message.text.replace(',', '.'))
        if weight < 0: raise ValueError
        context.user_data['avg_weight_g'] = weight if weight > 0 else None
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–ª–∞–Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥'):")
        return State.ENTER_REASON_FM
    except (ValueError, TypeError):
        await update.message.reply_text("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return State.ENTER_AVG_WEIGHT_FM


async def reason_received_fm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    context.user_data['reason'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç/–∑–∞–∫–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ê–∫—Ç #25'). –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –Ω–∞–ø–∏—Å–∞–≤ '–Ω–µ—Ç':")
    return State.ENTER_REF_FM


async def ref_received_fm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> State:
    ref_value = update.message.text
    context.user_data['ref'] = ref_value if ref_value.lower() != '–Ω–µ—Ç' else None

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    move_type = context.user_data['move_type']
    quantity = context.user_data['quantity']
    avg_weight = context.user_data.get('avg_weight_g')
    reason = context.user_data['reason']
    ref = context.user_data.get('ref')

    summary = "<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
    if move_type == 'transfer':
        pond_src = context.user_data['pond_src']
        pond_dest = context.user_data['pond_dest']
        summary += (
            f"<b>–û–ø–µ—Ä–∞—Ü–∏—è:</b> –ü–µ—Ä–µ–≤–æ–¥\n"
            f"<b>–ò–∑:</b> {pond_src.name}\n"
            f"<b>–í:</b> {pond_dest.name}\n"
        )
    else:  # sale, death, stocking
        pond = context.user_data.get('pond_src') or context.user_data.get('pond_dest')
        summary += (
            f"<b>–û–ø–µ—Ä–∞—Ü–∏—è:</b> {move_type.value}\n"
            f"<b>–í–æ–¥–æ—ë–º:</b> {pond.name}\n"
        )

    summary += (
        f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.\n"
        f"<b>–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å:</b> {avg_weight or '–Ω–µ —É–∫–∞–∑–∞–Ω'} –≥\n"
        f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
        f"<b>–°—Å—ã–ª–∫–∞ (ref):</b> {ref or '–Ω–µ—Ç'}"
    )
    keyboard = [[InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_save"), InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_op")]]
    await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    return State.CONFIRM_FISH_MOVE


async def save_fish_move_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    try:
        user_str = f"{context.user_data['current_user'].name} ({context.user_data['current_user'].id})"
        common_data = {
            'ts': datetime.now(),
            'quantity': context.user_data['quantity'],
            'avg_weight_g': context.user_data.get('avg_weight_g'),
            'reason': context.user_data.get('reason', ''),
            'ref': context.user_data.get('ref'),
            'user': user_str
        }

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–≤–æ–¥, —Å–æ–∑–¥–∞–µ–º –î–í–ï –∑–∞–ø–∏—Å–∏
        if context.user_data['move_type'] == 'transfer':
            pond_src = context.user_data['pond_src']
            pond_dest = context.user_data['pond_dest']

            # –ó–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–æ–¥–æ–µ–º–∞
            row_out = FishMoveRow(
                pond_id=pond_src.id,
                move_type=FishMoveType.TRANSFER_OUT,
                **common_data
            )
            # –ó–∞–ø–∏—Å—å –æ –ø—Ä–∏—Ö–æ–¥–µ –≤ –≤–æ–¥–æ–µ–º-–ø–æ–ª—É—á–∞—Ç–µ–ª—å
            row_in = FishMoveRow(
                pond_id=pond_dest.id,
                move_type=FishMoveType.TRANSFER_IN,
                **common_data
            )
            logs.append_fish_move(row_out)
            logs.append_fish_move(row_in)
            await query.edit_message_text(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ {common_data['quantity']} —à—Ç. –∏–∑ '{pond_src.name}' –≤ '{pond_dest.name}' —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

        else:  # –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
            move_type = context.user_data['move_type']
            pond = context.user_data.get('pond_src') or context.user_data.get('pond_dest')
            row = FishMoveRow(
                pond_id=pond.id,
                move_type=move_type,
                **common_data
            )
            logs.append_fish_move(row)
            await query.edit_message_text(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è '{move_type.value}' –¥–ª—è –≤–æ–¥–æ—ë–º–∞ '{pond.name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –¥–≤–∏–∂–µ–Ω–∏–∏ —Ä—ã–±—ã: {e}")
        await query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    context.user_data.clear()
    return ConversationHandler.END


fish_move_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Text(ReplyButton.FISH_MOVE), fish_move_start)],
    states={
        State.SELECT_POND_FM_SRC: [CallbackQueryHandler(pond_src_selected_for_move, pattern="^pond_")],
        State.SELECT_MOVE_TYPE: [CallbackQueryHandler(move_type_selected, pattern="^move_")],
        State.SELECT_POND_FM_DEST: [CallbackQueryHandler(pond_dest_selected_for_move, pattern="^ponddest_")],
        State.ENTER_QUANTITY_FM: [MessageHandler(filters.TEXT & ~filters.COMMAND, quantity_received_fm)],
        State.ENTER_AVG_WEIGHT_FM: [MessageHandler(filters.TEXT & ~filters.COMMAND, avg_weight_received_fm)],
        State.ENTER_REASON_FM: [MessageHandler(filters.TEXT & ~filters.COMMAND, reason_received_fm)],
        State.ENTER_REF_FM: [MessageHandler(filters.TEXT & ~filters.COMMAND, ref_received_fm)],
        State.CONFIRM_FISH_MOVE: [CallbackQueryHandler(save_fish_move_data, pattern="^confirm_save$"), CallbackQueryHandler(cancel, pattern="^cancel_op$")],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    allow_reentry=True
)