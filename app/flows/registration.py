from enum import Enum, auto
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
)

from app.bot.notifications import notify_admins
from app.models.user import User, UserRole
from app.sheets import logs, references
from app.utils.logger import log
from .common import cancel


class RegistrationState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    NAME = auto()
    PHONE = auto()
    CONFIRM = auto()


async def register_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RegistrationState | int:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ.
    """
    user_id = update.effective_user.id
    if references.get_user_by_id(user_id):
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return ConversationHandler.END

    await update.message.reply_text("–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é:")
    return RegistrationState.NAME


async def name_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RegistrationState:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    context.user_data['name'] = update.message.text

    phone_button = KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    reply_markup = ReplyKeyboardMarkup([[phone_button]], one_time_keyboard=True, resize_keyboard=True)

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç ---
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=reply_markup
    )
    return RegistrationState.PHONE


# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –∏ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–∞–∫—Ç—ã ---
async def contact_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RegistrationState:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    contact = update.message.contact
    
    # –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if contact.user_id != update.effective_user.id:
        await update.message.reply_text(
            "‚ùóÔ∏è–≠—Ç–æ –Ω–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=update.message.reply_markup # –°–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—É –∂–µ –∫–Ω–æ–ø–∫—É
        )
        return RegistrationState.PHONE

    phone_number = contact.phone_number
    context.user_data['phone'] = phone_number
    user_name = context.user_data['name']

    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"–ò–º—è: {user_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n\n"
        f"–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /confirm –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
        reply_markup=ReplyKeyboardRemove()
    )
    return RegistrationState.CONFIRM

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ (—Ç–µ–∫—Å—Ç–æ–º) ---
async def phone_text_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RegistrationState:
    """
    –°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.
    """
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞. –í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è."
    )
    return RegistrationState.PHONE


async def confirm_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    """
    try:
        user_model = User(
            user_id=update.effective_user.id,
            user_name=context.user_data['name'],
            phone_number=context.user_data['phone'],
            role=UserRole.PENDING
        )
        logs.append_new_user(user_model)
        references.get_all_users.cache_clear()

        await update.message.reply_text(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
        )

        admin_message = (
            f"üîî –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!\n\n"
            f"ID: {user_model.id}\n"
            f"–ò–º—è: {user_model.name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_model.phone}\n\n"
            f"–ù–∞–∑–Ω–∞—á—å—Ç–µ —Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –≤—ã–∑–æ–≤ –Ω–∞ –Ω–æ–≤—ã–π ---
        await notify_admins(context, admin_message)
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è user_id {update.effective_user.id}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        context.user_data.clear()

    return ConversationHandler.END


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
registration_conv_handler = ConversationHandler(
    entry_points=[CommandHandler("register", register_start)],
    states={
        RegistrationState.NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_received)],
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 4: –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è PHONE ---
        RegistrationState.PHONE: [
            MessageHandler(filters.CONTACT, contact_received),
            MessageHandler(filters.TEXT & ~filters.COMMAND, phone_text_received)
        ],
        RegistrationState.CONFIRM: [CommandHandler("confirm", confirm_registration)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    allow_reentry=True
)