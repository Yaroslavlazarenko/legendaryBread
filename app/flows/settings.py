# app/flows/settings.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler

from telegram.error import BadRequest

from app.bot.middleware import restricted
from app.models.user import UserRole
from app.sheets import references
from app.utils.logger import log

from app.bot.keyboards import create_main_menu_keyboard, ReplyButton


@restricted(allowed_roles=[UserRole.ADMIN])
async def show_notification_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    user = context.user_data['current_user']
    
    status_text = "–í–∫–ª—é—á–µ–Ω—ã üîî" if user.notifications_enabled else "–í—ã–∫–ª—é—á–µ–Ω—ã üîï"
    button_text = "–í—ã–∫–ª—é—á–∏—Ç—å üîï" if user.notifications_enabled else "–í–∫–ª—é—á–∏—Ç—å üîî"
    callback_data = "toggle_notifications_to_off" if user.notifications_enabled else "toggle_notifications_to_on"

    inline_keyboard = [
        [InlineKeyboardButton(button_text, callback_data=callback_data)],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
    ]
    reply_markup_inline = InlineKeyboardMarkup(inline_keyboard)
    
    message_text = (
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.\n\n"
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>{status_text}</b>"
    )

    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup_inline, parse_mode='HTML')
        except BadRequest as e:
            if "Message is not modified" in str(e):
                log.info("Tried to edit message with same content (notification settings). Skipping.")
            else:
                log.error(f"Error editing message in show_notification_settings: {e}")
                await update.callback_query.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)
    else:
        await update.message.reply_text(message_text, reply_markup=reply_markup_inline, parse_mode='HTML')


@restricted(allowed_roles=[UserRole.ADMIN])
async def toggle_notification_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    current_user_status = context.user_data['current_user'].notifications_enabled
    
    new_status = not current_user_status
    
    success = references.update_user_notification_status(user_id, new_status)
    
    if success:
        context.user_data['current_user'].notifications_enabled = new_status
        await show_notification_settings(update, context)
    else:
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")


async def back_to_main_menu_from_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    user = context.user_data.get('current_user')
    if not user:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return

    reply_markup_main_menu = create_main_menu_keyboard(user.role) # –≠—Ç–æ ReplyKeyboardMarkup
    
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –û—Ç–¥–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ ---
    # 1. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await query.edit_message_text(
            text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=None # <-- –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        )
    except BadRequest as e:
        if "Message is not modified" in str(e):
            log.info("Tried to edit message with same content (back to main menu). Skipping.")
        else:
            log.error(f"Error editing message to remove inline keyboard: {e}")
            # –í —Å–ª—É—á–∞–µ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=user.id,
                text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=reply_markup_main_menu
            )
            return

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ReplyKeyboardMarkup
    await context.bot.send_message(
        chat_id=user.id,
        text="–í–æ—Ç –≤–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=reply_markup_main_menu
    )
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---


notifications_command_handler = CommandHandler("notifications", show_notification_settings)
notifications_callback_handler = CallbackQueryHandler(toggle_notification_callback, pattern="^toggle_notifications_to_")
back_to_main_menu_handler = CallbackQueryHandler(back_to_main_menu_from_settings, pattern="^back_to_main_menu$")