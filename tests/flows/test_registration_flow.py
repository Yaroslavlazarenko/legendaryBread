import pytest
from unittest.mock import AsyncMock, MagicMock, patch, ANY

from telegram import Update
from telegram.ext import ConversationHandler

from app.flows.registration import (
    RegistrationState, register_start, name_received, contact_received, phone_text_received, confirm_registration # –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç phone_received –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ contact_received –∏ phone_text_received
)
from app.models.user import User, UserRole

pytestmark = pytest.mark.asyncio

@pytest.fixture
def mock_update():
    update = MagicMock(spec=Update)
    update.effective_user.id = 123
    update.message = AsyncMock()
    update.message.contact = None # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    update.callback_query = None # –î–æ–±–∞–≤–∏–º, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    return update

@pytest.fixture
def mock_context():
    context = MagicMock()
    context.user_data = {}
    context.bot = AsyncMock()
    return context

@patch('app.flows.registration.references')
@patch('app.flows.registration.logs')
@patch('app.flows.registration.notify_admins', new_callable=AsyncMock) # –ú–æ–∫–∞–µ–º notify_admins
async def test_registration_full_flow_with_contact_button_success(
    mock_notify_admins, mock_logs, mock_references, mock_update, mock_context
):
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É."""
    
    mock_references.get_user_by_id.return_value = None

    # 1. register_start
    next_state = await register_start(mock_update, mock_context)
    mock_update.message.reply_text.assert_called_with("–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é:")
    assert next_state == RegistrationState.NAME

    # 2. name_received
    mock_update.message.text = "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    next_state = await name_received(mock_update, mock_context)
    assert mock_context.user_data['name'] == "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    mock_update.message.reply_text.assert_called_with(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", # –ò–ó–ú–ï–ù–ï–ù–û: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_markup=ANY
    )
    assert next_state == RegistrationState.PHONE

    # 3. contact_received (–∏–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)
    contact_phone = "+380991234567"
    mock_update.message.contact = MagicMock()
    mock_update.message.contact.phone_number = contact_phone
    mock_update.message.contact.user_id = mock_update.effective_user.id # –í–∞–∂–Ω–æ, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    mock_update.message.text = None # –í–∞–∂–Ω–æ: –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç, —Ç–æ message.text –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None
    
    next_state = await contact_received(mock_update, mock_context) # –ò–ó–ú–ï–ù–ï–ù–û: –≤—ã–∑—ã–≤–∞–µ–º contact_received
    assert mock_context.user_data['phone'] == contact_phone
    assert "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ" in mock_update.message.reply_text.call_args[0][0]
    assert "–¢–µ–ª–µ—Ñ–æ–Ω: +380991234567" in mock_update.message.reply_text.call_args[0][0]
    assert next_state == RegistrationState.CONFIRM

    # 4. confirm_registration
    mock_update.message.text = "/confirm" # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /confirm
    mock_update.message.reply_markup = None # –£–±–∏—Ä–∞–µ–º reply_markup –ø–æ—Å–ª–µ confirm_registration
    final_state = await confirm_registration(mock_update, mock_context)
    
    mock_logs.append_new_user.assert_called_once()
    saved_user: User = mock_logs.append_new_user.call_args[0][0]
    assert saved_user.id == 123
    assert saved_user.name == "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    assert saved_user.phone == "+380991234567" # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
    assert saved_user.role == UserRole.PENDING

    mock_update.message.reply_text.assert_called_with(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
    )
    mock_notify_admins.assert_called_once_with(ANY, ANY) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ notify_admins

    assert final_state == ConversationHandler.END
    assert not mock_context.user_data # user_data –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—á–∏—â–µ–Ω—ã


@patch('app.flows.registration.references')
async def test_register_start_already_registered_user(mock_references, mock_update, mock_context):
    """–¢–µ—Å—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–æ –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ."""
    mock_references.get_user_by_id.return_value = User(user_id=123, user_name="Existing User", role=UserRole.CLIENT)

    final_state = await register_start(mock_update, mock_context)
    
    mock_references.get_user_by_id.assert_called_once_with(123)
    mock_update.message.reply_text.assert_called_with("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
    assert final_state == ConversationHandler.END


@patch('app.flows.registration.references')
async def test_phone_text_received_when_manual_input_not_allowed(mock_references, mock_update, mock_context):
    """–¢–µ—Å—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–µ–∫—Å—Ç–æ–º, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ."""
    mock_references.get_user_by_id.return_value = None
    mock_context.user_data['name'] = "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" # –ò–º–∏—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∏–º—è —É–∂–µ –≤–≤–µ–¥–µ–Ω–æ

    mock_update.message.text = "+380501234567" # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–µ–∫—Å—Ç–æ–º
    mock_update.message.contact = None # –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω

    next_state = await phone_text_received(mock_update, mock_context) # –ò–ó–ú–ï–ù–ï–ù–û: –≤—ã–∑—ã–≤–∞–µ–º phone_text_received

    mock_update.message.reply_text.assert_called_with(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞. –í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è."
    )
    assert next_state == RegistrationState.PHONE # –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –∂–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞


@patch('app.flows.registration.references')
async def test_contact_received_with_wrong_user_id(mock_references, mock_update, mock_context):
    """–¢–µ—Å—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç, –Ω–æ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É user_id."""
    mock_references.get_user_by_id.return_value = None
    mock_context.user_data['name'] = "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    contact_phone = "+1234567890"
    mock_update.message.contact = MagicMock()
    mock_update.message.contact.phone_number = contact_phone
    mock_update.message.contact.user_id = 999 # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_id
    mock_update.message.text = None
    
    # –ß—Ç–æ–±—ã mock_update.message.reply_markup –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏
    mock_update.message.reply_markup = MagicMock() 

    next_state = await contact_received(mock_update, mock_context)

    mock_update.message.reply_text.assert_called_with(
        "‚ùóÔ∏è–≠—Ç–æ –Ω–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
        reply_markup=mock_update.message.reply_markup
    )
    assert next_state == RegistrationState.PHONE
    assert 'phone' not in mock_context.user_data # –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω